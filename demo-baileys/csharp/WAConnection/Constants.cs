/// This file was generated by C# converter tool
/// Any changes made to this file manually will be lost next time the file is regenerated.

using System.Linq;
using TypeScript.CSharp;

namespace Bailey
{
    using WANode = WA.Node;
    using WAMessage = proto.WebMessageInfo;
    using WAMessageContent = proto.IMessage;
    using WAContactMessage = proto.ContactMessage;
    using WAContactsArrayMessage = proto.ContactsArrayMessage;
    using WAGroupInviteMessage = proto.GroupInviteMessage;
    using WAListMessage = proto.ListMessage;
    using WAButtonsMessage = proto.ButtonsMessage;
    using WAMessageKey = proto.IMessageKey;
    using WATextMessage = proto.ExtendedTextMessage;
    using WAContextInfo = proto.IContextInfo;
    using WAGenericMediaMessage = OrType<proto.IVideoMessage, proto.IImageMessage, proto.IAudioMessage, proto.IDocumentMessage, proto.IStickerMessage>;
    using WAInitResponse = (string @ref, double ttl, double /*200*/ status);
    using WABusinessCategories = (string id, string localized_display_name);
    using WABusinessHours = (string timezone, List<WABusinessHoursConfig> config, List<WABusinessHoursConfig> business_config);
    using WABusinessHoursConfig = (string day_of_week, string mode, double open_time, double close_time);
    using WAMediaUpload = OrType<Buffer, Dictionary<string, OrType<URL, string>>>;
    using WALoadChatOptions = (string searchString, Func<WAChat, bool> custom);
    using WAConnectOptions = (double maxIdleTimeMs, double maxRetries, double phoneResponseTime, double connectCooldownMs, Agent agent, Agent fetchAgent, bool alwaysUseTakeover, bool queryChatsTillReceived, double maxQueryResponseTime, bool logQR);
    using WAConnectionState = string /*open*/;
    using AnyAuthenticationCredentials = OrType<AuthenticationCredentialsBrowser, AuthenticationCredentialsBase64, AuthenticationCredentials>;
    using WAGroupParticipant = AndType<WAContact, (bool isAdmin, bool isSuperAdmin)>;
    using WAContactUpdate = AndType<Partial<WAContact>, (string jid, string status)>;
    using WAChatIndex = (string index, string /*true*/ owner, string participant);
    using WAChatUpdate = AndType<Partial<WAChat>, (string jid, bool hasNewMessage)>;
    using WATag = List<object>;
    using WAParticipantAction = string /*add*/;
    using BaileysEvent = string /*open*/;

    public interface WABusinessProfile
    {
        string description { get; set; }

        string email { get; set; }

        WABusinessHours business_hours { get; set; }

        List<string> website { get; set; }

        List<WABusinessCategories> categories { get; set; }

        string wid { get; set; }
    }

    public interface WALocationMessage
    {
        double degreesLatitude { get; set; }

        double degreesLongitude { get; set; }

        string address { get; set; }
    }

    public class BaileysError : Error
    {
        public double status { get; set; }
        public dynamic context { get; set; }

        public BaileysError(string message, dynamic context, string stack = null) : base(message)
        {
            this.name = "BaileysError";
            this.status = context.status;
            this.context = context;
            if (stack)
            {
                this.stack = stack;
            }
        }
    }

    public interface WAQuery
    {
        OrType<List<dynamic>, WANode> json { get; set; }

        WATag binaryTags { get; set; }

        double timeoutMs { get; set; }

        string tag { get; set; }

        bool expect200 { get; set; }

        bool waitForOpen { get; set; }

        bool longTag { get; set; }

        bool requiresPhoneConnection { get; set; }

        bool startDebouncedTimeout { get; set; }

        double maxRetries { get; set; }
    }

    public enum ReconnectMode
    {
        /// <summary>
        /// does not reconnect
        /// </summary>
        off = 0,
        /// <summary>
        /// reconnects only when the connection is 'lost' or 'close'
        /// </summary>
        onConnectionLost = 1,
        /// <summary>
        /// reconnects on all disconnects, including take overs
        /// </summary>
        onAllErrors = 2
    }

    /// <summary>
    /// Types of Disconnect Reasons
    /// </summary>
    public enum DisconnectReason
    {
        /// <summary>
        /// The connection was closed intentionally
        /// </summary>
        intentional = "intentional",
        /// <summary>
        /// The connection was terminated either by the client or server
        /// </summary>
        close = "close",
        /// <summary>
        /// The connection was lost, called when the server stops responding to requests
        /// </summary>
        lost = "lost",
        /// <summary>
        /// When WA Web is opened elsewhere & this session is disconnected
        /// </summary>
        replaced = "replaced",
        /// <summary>
        /// The credentials for the session have been invalidated, i.e. logged out either from the phone or WA Web
        /// </summary>
        invalidSession = "invalid_session",
        /// <summary>
        /// Received a 500 result in a query -- something has gone very wrong
        /// </summary>
        badSession = "bad_session",
        /// <summary>
        /// No idea, can be a sign of log out too
        /// </summary>
        unknown = "unknown",
        /// <summary>
        /// Well, the connection timed out
        /// </summary>
        timedOut = "timed out"
    }

    public interface MediaConnInfo
    {
        string auth { get; set; }

        double ttl { get; set; }

        List<Dictionary<string, string>> hosts { get; set; }

        Date fetchDate { get; set; }
    }

    public interface AuthenticationCredentials
    {
        string clientID { get; set; }

        string serverToken { get; set; }

        string clientToken { get; set; }

        Buffer encKey { get; set; }

        Buffer macKey { get; set; }
    }

    public interface AuthenticationCredentialsBase64
    {
        string clientID { get; set; }

        string serverToken { get; set; }

        string clientToken { get; set; }

        string encKey { get; set; }

        string macKey { get; set; }
    }

    public interface AuthenticationCredentialsBrowser
    {
        string WABrowserId { get; set; }

        OrType<(string encKey, string macKey), string> WASecretBundle { get; set; }

        string WAToken1 { get; set; }

        string WAToken2 { get; set; }
    }

    public interface WAGroupCreateResponse
    {
        double status { get; set; }

        string gid { get; set; }

        List<Dictionary<string, dynamic>> participants { get; set; }
    }

    public interface WAGroupMetadata
    {
        string id { get; set; }

        string owner { get; set; }

        string subject { get; set; }

        double creation { get; set; }

        string desc { get; set; }

        string descOwner { get; set; }

        string descId { get; set; }

        /// <summary>
        /// is set when the group only allows admins to change group settings
        /// </summary>
        string /*true*/ restrict { get; set; }

        /// <summary>
        /// is set when the group only allows admins to write messages
        /// </summary>
        string /*true*/ announce { get; set; }

        List<WAGroupParticipant> participants { get; set; }
    }

    public interface WAGroupModification
    {
        double status { get; set; }

        Dictionary<string, dynamic> participants { get; set; }
    }

    public interface WAPresenceData
    {
        Presence lastKnownPresence { get; set; }

        double lastSeen { get; set; }

        string name { get; set; }
    }

    public interface WAContact
    {
        string verify { get; set; }

        /// <summary>
        /// name of the contact, the contact has set on their own on WA
        /// </summary>
        string notify { get; set; }

        string jid { get; set; }

        /// <summary>
        /// I have no idea
        /// </summary>
        string vname { get; set; }

        /// <summary>
        /// name of the contact, you have saved on your WA
        /// </summary>
        string name { get; set; }

        string index { get; set; }

        /// <summary>
        /// short name for the contact
        /// </summary>
        string @short { get; set; }

        string imgUrl { get; set; }
    }

    public interface WAUser : WAContact
    {
        dynamic phone { get; set; }
    }

    public interface WAChat
    {
        string jid { get; set; }

        double t { get; set; }

        /// <summary>
        /// number of unread messages, is < 0 if the chat is manually marked unread
        /// </summary>
        double count { get; set; }

        string /*true*/ archive { get; set; }

        string /*true*/ clear { get; set; }

        string /*true*/ read_only { get; set; }

        string mute { get; set; }

        string pin { get; set; }

        string /*false*/ spam { get; set; }

        string modify_tag { get; set; }

        string name { get; set; }

        /// <summary>
        /// when ephemeral messages were toggled on
        /// </summary>
        string eph_setting_ts { get; set; }

        /// <summary>
        /// how long each message lasts for
        /// </summary>
        string ephemeral { get; set; }

        KeyedDB<WAMessage, string> messages { get; set; }

        string imgUrl { get; set; }

        Dictionary<string, WAPresenceData> presences { get; set; }

        WAGroupMetadata metadata { get; set; }
    }

    public enum WAMetric
    {
        debugLog = 1,
        queryResume = 2,
        liveLocation = 3,
        queryMedia = 4,
        queryChat = 5,
        queryContact = 6,
        queryMessages = 7,
        presence = 8,
        presenceSubscribe = 9,
        group = 10,
        read = 11,
        chat = 12,
        received = 13,
        picture = 14,
        status = 15,
        message = 16,
        queryActions = 17,
        block = 18,
        queryGroup = 19,
        queryPreview = 20,
        queryEmoji = 21,
        queryRead = 22,
        queryVCard = 29,
        queryStatus = 30,
        queryStatusUpdate = 31,
        queryLiveLocation = 33,
        queryLabel = 36,
        queryQuickReply = 39
    }

    public enum WAFlag
    {
        available = 160,
        other = 136,
        ignore = 1 << 7,
        acknowledge = 1 << 6,
        unavailable = 1 << 4,
        expires = 1 << 3,
        composing = 1 << 2,
        recording = 1 << 2,
        paused = 1 << 2
    }

    /// <summary>
    /// set of statuses visible to other people; see updatePresence() in WhatsAppWeb.Send
    /// </summary>
    public enum Presence
    {
        unavailable = "unavailable",
        available = "available",
        composing = "composing",
        recording = "recording",
        paused = "paused"
    }

    /// <summary>
    /// Set of message types that are supported by the library
    /// </summary>
    public enum MessageType
    {
        text = "conversation",
        extendedText = "extendedTextMessage",
        contact = "contactMessage",
        contactsArray = "contactsArrayMessage",
        groupInviteMessage = "groupInviteMessage",
        listMessage = "listMessage",
        buttonsMessage = "buttonsMessage",
        location = "locationMessage",
        liveLocation = "liveLocationMessage",
        image = "imageMessage",
        video = "videoMessage",
        sticker = "stickerMessage",
        document = "documentMessage",
        audio = "audioMessage",
        product = "productMessage"
    }

    public enum ChatModification
    {
        archive = "archive",
        unarchive = "unarchive",
        pin = "pin",
        unpin = "unpin",
        mute = "mute",
        unmute = "unmute",
        delete = "delete",
        clear = "clear"
    }

    public enum Mimetype
    {
        jpeg = "image/jpeg",
        png = "image/png",
        mp4 = "video/mp4",
        gif = "video/gif",
        pdf = "application/pdf",
        ogg = "audio/ogg; codecs=opus",
        mp4Audio = "audio/mp4",
        /// <summary>
        /// for stickers
        /// </summary>
        webp = "image/webp"
    }

    public interface MessageOptions
    {
        /// <summary>
        /// the message you want to quote
        /// </summary>
        WAMessage quoted { get; set; }

        /// <summary>
        /// some random context info (can show a forwarded message with this too)
        /// </summary>
        WAContextInfo contextInfo { get; set; }

        /// <summary>
        /// optional, if you want to manually set the timestamp of the message
        /// </summary>
        Date timestamp { get; set; }

        /// <summary>
        /// (for media messages) the caption to send with the media (cannot be sent with stickers though)
        /// </summary>
        string caption { get; set; }

        /// <summary>
        /// For location & media messages -- has to be a base 64 encoded JPEG if you want to send a custom thumb, 
        /// or set to null if you don't want to send a thumbnail.
        /// Do not enter this field if you want to automatically generate a thumb
        /// </summary>
        string thumbnail { get; set; }

        /// <summary>
        /// (for media messages) specify the type of media (optional for all media types except documents)
        /// </summary>
        OrType<Mimetype, string> mimetype { get; set; }

        /// <summary>
        /// (for media messages) file name for the media
        /// </summary>
        string filename { get; set; }

        /// <summary>
        /// For audio messages, if set to true, will send as a `voice note`
        /// </summary>
        bool ptt { get; set; }

        /// <summary>
        /// For image or video messages, if set to true, will send as a `viewOnceMessage`
        /// </summary>
        bool viewOnce { get; set; }

        /// <summary>
        /// Optional agent for media uploads
        /// </summary>
        Agent uploadAgent { get; set; }

        /// <summary>
        /// If set to true (default), automatically detects if you're sending a link & attaches the preview
        /// </summary>
        bool detectLinks { get; set; }

        /// <summary>
        /// Optionally specify the duration of the media (audio/video) in seconds
        /// </summary>
        double duration { get; set; }

        /// <summary>
        /// Fetches new media options for every media file
        /// </summary>
        bool forceNewMediaOptions { get; set; }

        /// <summary>
        /// Wait for the message to be sent to the server (default true)
        /// </summary>
        bool waitForAck { get; set; }

        /// <summary>
        /// Should it send as a disappearing messages. 
        /// By default 'chat' -- which follows the setting of the chat
        /// </summary>
        OrType<string /*chat*/, bool> sendEphemeral { get; set; }

        /// <summary>
        /// Force message id
        /// </summary>
        string messageId { get; set; }

        /// <summary>
        /// For sticker messages, if set to true, will considered as animated sticker
        /// </summary>
        bool isAnimated { get; set; }
    }

    public interface WABroadcastListInfo
    {
        double status { get; set; }

        string name { get; set; }

        List<Dictionary<string, string>> recipients { get; set; }
    }

    public interface WAUrlInfo
    {
        string canonical_url { get; set; }

        string matched_text { get; set; }

        string title { get; set; }

        string description { get; set; }

        Buffer jpegThumbnail { get; set; }
    }

    public interface WAProfilePictureChange
    {
        double status { get; set; }

        string tag { get; set; }

        string eurl { get; set; }
    }

    public interface MessageInfo
    {
        List<(string jid, string t)> reads { get; set; }

        List<(string jid, string t)> deliveries { get; set; }
    }

    public interface WAMessageStatusUpdate
    {
        string from { get; set; }

        string to { get; set; }

        /// <summary>
        /// Which participant caused the update (only for groups)
        /// </summary>
        string participant { get; set; }

        Date timestamp { get; set; }

        /// <summary>
        /// Message IDs read/delivered
        /// </summary>
        List<string> ids { get; set; }

        /// <summary>
        /// Status of the Message IDs
        /// </summary>
        WA_MESSAGE_STATUS_TYPE type { get; set; }
    }

    public interface WAOpenResult
    {
        /// <summary>
        /// Was this connection opened via a QR scan
        /// </summary>
        bool /*true*/ newConnection { get; set; }

        WAUser user { get; set; }

        bool /*true*/ isNewUser { get; set; }

        AuthenticationCredentials auth { get; set; }
    }

    public enum GroupSettingChange
    {
        messageSend = "announcement",
        settingsChange = "locked"
    }

    public interface PresenceUpdate
    {
        string id { get; set; }

        string participant { get; set; }

        string t { get; set; }

        Presence type { get; set; }

        bool deny { get; set; }
    }

    public interface BlocklistUpdate
    {
        List<string> added { get; set; }

        List<string> removed { get; set; }
    }
}