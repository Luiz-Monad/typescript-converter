/// This file was generated by C# converter tool
/// Any changes made to this file manually will be lost next time the file is regenerated.

using System.Linq;
using TypeScript.CSharp;

namespace Bailey
{
    using WANode = WA.Node;
    using WAMessage = proto.WebMessageInfo;
    using WAMessageContent = proto.IMessage;
    using WAContactMessage = proto.ContactMessage;
    using WAContactsArrayMessage = proto.ContactsArrayMessage;
    using WAGroupInviteMessage = proto.GroupInviteMessage;
    using WAListMessage = proto.ListMessage;
    using WAButtonsMessage = proto.ButtonsMessage;
    using WAMessageKey = proto.IMessageKey;
    using WATextMessage = proto.ExtendedTextMessage;
    using WAContextInfo = proto.IContextInfo;
    using WAGenericMediaMessage = dynamic;
    using WAMediaUpload = dynamic;
    using WAConnectionState = dynamic;
    using AnyAuthenticationCredentials = dynamic;
    using WAGroupParticipant = Combine<WAContact, (bool isAdmin, bool isSuperAdmin)>;
    using WAContactUpdate = Combine<Partial<WAContact>, (String jid, String status)>;
    using WAChatUpdate = Combine<Partial<WAChat>, (String jid, bool hasNewMessage)>;
    using WATag = Array<Object>;
    using WAParticipantAction = dynamic;
    using BaileysEvent = dynamic;

    (String @ref, double ttl, dynamic status)WAInitResponse public interface WABusinessProfile
    {
        String description
        {
            get;
            set;
        }

        String email
        {
            get;
            set;
        }

        WABusinessHours business_hours
        {
            get;
            set;
        }

        Array<String> website
        {
            get;
            set;
        }

        Array<WABusinessCategories> categories
        {
            get;
            set;
        }

        String wid
        {
            get;
            set;
        }
    }

    (String id, String localized_display_name)WABusinessCategories(String timezone, Array<WABusinessHoursConfig> config, Array<WABusinessHoursConfig> business_config)WABusinessHours(String day_of_week, String mode, double open_time, double close_time)WABusinessHoursConfig public interface WALocationMessage
    {
        double degreesLatitude
        {
            get;
            set;
        }

        double degreesLongitude
        {
            get;
            set;
        }

        String address
        {
            get;
            set;
        }
    }

    public class BaileysError : Error
    {
        public double status
        {
            get;
            set;
        }

        public dynamic context
        {
            get;
            set;
        }

        public BaileysError(String message, dynamic context, String stack = null): base(message)
        {
            this.name = "BaileysError";
            this.status = context.status;
            this.context = context;
            if (stack)
            {
                this.stack = stack;
            }
        }
    }

    public interface WAQuery
    {
        dynamic json
        {
            get;
            set;
        }

        WATag binaryTags
        {
            get;
            set;
        }

        double timeoutMs
        {
            get;
            set;
        }

        String tag
        {
            get;
            set;
        }

        bool expect200
        {
            get;
            set;
        }

        bool waitForOpen
        {
            get;
            set;
        }

        bool longTag
        {
            get;
            set;
        }

        bool requiresPhoneConnection
        {
            get;
            set;
        }

        bool startDebouncedTimeout
        {
            get;
            set;
        }

        double maxRetries
        {
            get;
            set;
        }
    }

    public enum ReconnectMode
    {
        /// <summary>
        /// does not reconnect
        /// </summary>
        off = 0,
        /// <summary>
        /// reconnects only when the connection is 'lost' or 'close'
        /// </summary>
        onConnectionLost = 1,
        /// <summary>
        /// reconnects on all disconnects, including take overs
        /// </summary>
        onAllErrors = 2
    }

    (String searchString, AAA___ (c: WAChat) => boolean ___AAA custom)WALoadChatOptions(double maxIdleTimeMs, double maxRetries, double phoneResponseTime, double connectCooldownMs, Agent agent, Agent fetchAgent, bool alwaysUseTakeover, bool queryChatsTillReceived, double maxQueryResponseTime, bool logQR)WAConnectOptions 
    /// <summary>
    /// Types of Disconnect Reasons
    /// </summary>
    public enum DisconnectReason
    {
        /// <summary>
        /// The connection was closed intentionally
        /// </summary>
        intentional = "intentional",
        /// <summary>
        /// The connection was terminated either by the client or server
        /// </summary>
        close = "close",
        /// <summary>
        /// The connection was lost, called when the server stops responding to requests
        /// </summary>
        lost = "lost",
        /// <summary>
        /// When WA Web is opened elsewhere & this session is disconnected
        /// </summary>
        replaced = "replaced",
        /// <summary>
        /// The credentials for the session have been invalidated, i.e. logged out either from the phone or WA Web
        /// </summary>
        invalidSession = "invalid_session",
        /// <summary>
        /// Received a 500 result in a query -- something has gone very wrong
        /// </summary>
        badSession = "bad_session",
        /// <summary>
        /// No idea, can be a sign of log out too
        /// </summary>
        unknown = "unknown",
        /// <summary>
        /// Well, the connection timed out
        /// </summary>
        timedOut = "timed out"
    }

    public interface MediaConnInfo
    {
        String auth
        {
            get;
            set;
        }

        double ttl
        {
            get;
            set;
        }

        Array<Hashtable<String, String>> hosts
        {
            get;
            set;
        }

        Date fetchDate
        {
            get;
            set;
        }
    }

    public interface AuthenticationCredentials
    {
        String clientID
        {
            get;
            set;
        }

        String serverToken
        {
            get;
            set;
        }

        String clientToken
        {
            get;
            set;
        }

        Buffer encKey
        {
            get;
            set;
        }

        Buffer macKey
        {
            get;
            set;
        }
    }

    public interface AuthenticationCredentialsBase64
    {
        String clientID
        {
            get;
            set;
        }

        String serverToken
        {
            get;
            set;
        }

        String clientToken
        {
            get;
            set;
        }

        String encKey
        {
            get;
            set;
        }

        String macKey
        {
            get;
            set;
        }
    }

    public interface AuthenticationCredentialsBrowser
    {
        String WABrowserId
        {
            get;
            set;
        }

        dynamic WASecretBundle
        {
            get;
            set;
        }

        String WAToken1
        {
            get;
            set;
        }

        String WAToken2
        {
            get;
            set;
        }
    }

    public interface WAGroupCreateResponse
    {
        double status
        {
            get;
            set;
        }

        String gid
        {
            get;
            set;
        }

        Array<Hashtable<String, dynamic>> participants
        {
            get;
            set;
        }
    }

    public interface WAGroupMetadata
    {
        String id
        {
            get;
            set;
        }

        String owner
        {
            get;
            set;
        }

        String subject
        {
            get;
            set;
        }

        double creation
        {
            get;
            set;
        }

        String desc
        {
            get;
            set;
        }

        String descOwner
        {
            get;
            set;
        }

        String descId
        {
            get;
            set;
        }

        /// <summary>
        /// is set when the group only allows admins to change group settings
        /// </summary>
        dynamic restrict
        {
            get;
            set;
        }

        /// <summary>
        /// is set when the group only allows admins to write messages
        /// </summary>
        dynamic announce
        {
            get;
            set;
        }

        Array<WAGroupParticipant> participants
        {
            get;
            set;
        }
    }

    public interface WAGroupModification
    {
        double status
        {
            get;
            set;
        }

        Hashtable<String, dynamic> participants
        {
            get;
            set;
        }
    }

    public interface WAPresenceData
    {
        Presence lastKnownPresence
        {
            get;
            set;
        }

        double lastSeen
        {
            get;
            set;
        }

        String name
        {
            get;
            set;
        }
    }

    public interface WAContact
    {
        String verify
        {
            get;
            set;
        }

        /// <summary>
        /// name of the contact, the contact has set on their own on WA
        /// </summary>
        String notify
        {
            get;
            set;
        }

        String jid
        {
            get;
            set;
        }

        /// <summary>
        /// I have no idea
        /// </summary>
        String vname
        {
            get;
            set;
        }

        /// <summary>
        /// name of the contact, you have saved on your WA
        /// </summary>
        String name
        {
            get;
            set;
        }

        String index
        {
            get;
            set;
        }

        /// <summary>
        /// short name for the contact
        /// </summary>
        String short
        {
            get;
            set;
        }

        String imgUrl
        {
            get;
            set;
        }
    }

    public interface WAUser : WAContact
    {
        dynamic phone
        {
            get;
            set;
        }
    }

    public interface WAChat
    {
        String jid
        {
            get;
            set;
        }

        double t
        {
            get;
            set;
        }

        /// <summary>
        /// number of unread messages, is < 0 if the chat is manually marked unread
        /// </summary>
        double count
        {
            get;
            set;
        }

        dynamic archive
        {
            get;
            set;
        }

        dynamic clear
        {
            get;
            set;
        }

        dynamic read_only
        {
            get;
            set;
        }

        String mute
        {
            get;
            set;
        }

        String pin
        {
            get;
            set;
        }

        dynamic spam
        {
            get;
            set;
        }

        String modify_tag
        {
            get;
            set;
        }

        String name
        {
            get;
            set;
        }

        /// <summary>
        /// when ephemeral messages were toggled on
        /// </summary>
        String eph_setting_ts
        {
            get;
            set;
        }

        /// <summary>
        /// how long each message lasts for
        /// </summary>
        String ephemeral
        {
            get;
            set;
        }

        KeyedDB<WAMessage, String> messages
        {
            get;
            set;
        }

        String imgUrl
        {
            get;
            set;
        }

        Hashtable<String, WAPresenceData> presences
        {
            get;
            set;
        }

        WAGroupMetadata metadata
        {
            get;
            set;
        }
    }

    (String index, dynamic owner, String participant)WAChatIndex public enum WAMetric
    {
        debugLog = 1,
        queryResume = 2,
        liveLocation = 3,
        queryMedia = 4,
        queryChat = 5,
        queryContact = 6,
        queryMessages = 7,
        presence = 8,
        presenceSubscribe = 9,
        group = 10,
        read = 11,
        chat = 12,
        received = 13,
        picture = 14,
        status = 15,
        message = 16,
        queryActions = 17,
        block = 18,
        queryGroup = 19,
        queryPreview = 20,
        queryEmoji = 21,
        queryRead = 22,
        queryVCard = 29,
        queryStatus = 30,
        queryStatusUpdate = 31,
        queryLiveLocation = 33,
        queryLabel = 36,
        queryQuickReply = 39
    }

    public enum WAFlag
    {
        available = 160,
        other = 136,
        ignore = 1 << 7,
        acknowledge = 1 << 6,
        unavailable = 1 << 4,
        expires = 1 << 3,
        composing = 1 << 2,
        recording = 1 << 2,
        paused = 1 << 2
    }

    /// <summary>
    /// set of statuses visible to other people; see updatePresence() in WhatsAppWeb.Send
    /// </summary>
    public enum Presence
    {
        unavailable = "unavailable",
        available = "available",
        composing = "composing",
        recording = "recording",
        paused = "paused"
    }

    /// <summary>
    /// Set of message types that are supported by the library
    /// </summary>
    public enum MessageType
    {
        text = "conversation",
        extendedText = "extendedTextMessage",
        contact = "contactMessage",
        contactsArray = "contactsArrayMessage",
        groupInviteMessage = "groupInviteMessage",
        listMessage = "listMessage",
        buttonsMessage = "buttonsMessage",
        location = "locationMessage",
        liveLocation = "liveLocationMessage",
        image = "imageMessage",
        video = "videoMessage",
        sticker = "stickerMessage",
        document = "documentMessage",
        audio = "audioMessage",
        product = "productMessage"
    }

    public enum ChatModification
    {
        archive = "archive",
        unarchive = "unarchive",
        pin = "pin",
        unpin = "unpin",
        mute = "mute",
        unmute = "unmute",
        delete = "delete",
        clear = "clear"
    }

    public enum Mimetype
    {
        jpeg = "image/jpeg",
        png = "image/png",
        mp4 = "video/mp4",
        gif = "video/gif",
        pdf = "application/pdf",
        ogg = "audio/ogg; codecs=opus",
        mp4Audio = "audio/mp4",
        /// <summary>
        /// for stickers
        /// </summary>
        webp = "image/webp"
    }

    public interface MessageOptions
    {
        /// <summary>
        /// the message you want to quote
        /// </summary>
        WAMessage quoted
        {
            get;
            set;
        }

        /// <summary>
        /// some random context info (can show a forwarded message with this too)
        /// </summary>
        WAContextInfo contextInfo
        {
            get;
            set;
        }

        /// <summary>
        /// optional, if you want to manually set the timestamp of the message
        /// </summary>
        Date timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// (for media messages) the caption to send with the media (cannot be sent with stickers though)
        /// </summary>
        String caption
        {
            get;
            set;
        }

        /// <summary>
        /// For location & media messages -- has to be a base 64 encoded JPEG if you want to send a custom thumb, 
        /// or set to null if you don't want to send a thumbnail.
        /// Do not enter this field if you want to automatically generate a thumb
        /// </summary>
        String thumbnail
        {
            get;
            set;
        }

        /// <summary>
        /// (for media messages) specify the type of media (optional for all media types except documents)
        /// </summary>
        dynamic mimetype
        {
            get;
            set;
        }

        /// <summary>
        /// (for media messages) file name for the media
        /// </summary>
        String filename
        {
            get;
            set;
        }

        /// <summary>
        /// For audio messages, if set to true, will send as a `voice note`
        /// </summary>
        bool ptt
        {
            get;
            set;
        }

        /// <summary>
        /// For image or video messages, if set to true, will send as a `viewOnceMessage`
        /// </summary>
        bool viewOnce
        {
            get;
            set;
        }

        /// <summary>
        /// Optional agent for media uploads
        /// </summary>
        Agent uploadAgent
        {
            get;
            set;
        }

        /// <summary>
        /// If set to true (default), automatically detects if you're sending a link & attaches the preview
        /// </summary>
        bool detectLinks
        {
            get;
            set;
        }

        /// <summary>
        /// Optionally specify the duration of the media (audio/video) in seconds
        /// </summary>
        double duration
        {
            get;
            set;
        }

        /// <summary>
        /// Fetches new media options for every media file
        /// </summary>
        bool forceNewMediaOptions
        {
            get;
            set;
        }

        /// <summary>
        /// Wait for the message to be sent to the server (default true)
        /// </summary>
        bool waitForAck
        {
            get;
            set;
        }

        /// <summary>
        /// Should it send as a disappearing messages. 
        /// By default 'chat' -- which follows the setting of the chat
        /// </summary>
        dynamic sendEphemeral
        {
            get;
            set;
        }

        /// <summary>
        /// Force message id
        /// </summary>
        String messageId
        {
            get;
            set;
        }

        /// <summary>
        /// For sticker messages, if set to true, will considered as animated sticker
        /// </summary>
        bool isAnimated
        {
            get;
            set;
        }
    }

    public interface WABroadcastListInfo
    {
        double status
        {
            get;
            set;
        }

        String name
        {
            get;
            set;
        }

        Array<Hashtable<String, String>> recipients
        {
            get;
            set;
        }
    }

    public interface WAUrlInfo
    {
        String canonical-url
        {
            get;
            set;
        }

        String matched-text
        {
            get;
            set;
        }

        String title
        {
            get;
            set;
        }

        String description
        {
            get;
            set;
        }

        Buffer jpegThumbnail
        {
            get;
            set;
        }
    }

    public interface WAProfilePictureChange
    {
        double status
        {
            get;
            set;
        }

        String tag
        {
            get;
            set;
        }

        String eurl
        {
            get;
            set;
        }
    }

    public interface MessageInfo
    {
        Array<(String jid, String t)> reads
        {
            get;
            set;
        }

        Array<(String jid, String t)> deliveries
        {
            get;
            set;
        }
    }

    public interface WAMessageStatusUpdate
    {
        String from
        {
            get;
            set;
        }

        String to
        {
            get;
            set;
        }

        /// <summary>
        /// Which participant caused the update (only for groups)
        /// </summary>
        String participant
        {
            get;
            set;
        }

        Date timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// Message IDs read/delivered
        /// </summary>
        Array<String> ids
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the Message IDs
        /// </summary>
        WA_MESSAGE_STATUS_TYPE type
        {
            get;
            set;
        }
    }

    public interface WAOpenResult
    {
        /// <summary>
        /// Was this connection opened via a QR scan
        /// </summary>
        dynamic newConnection
        {
            get;
            set;
        }

        WAUser user
        {
            get;
            set;
        }

        dynamic isNewUser
        {
            get;
            set;
        }

        AuthenticationCredentials auth
        {
            get;
            set;
        }
    }

    public enum GroupSettingChange
    {
        messageSend = "announcement",
        settingsChange = "locked"
    }

    public interface PresenceUpdate
    {
        String id
        {
            get;
            set;
        }

        String participant
        {
            get;
            set;
        }

        String t
        {
            get;
            set;
        }

        Presence type
        {
            get;
            set;
        }

        bool deny
        {
            get;
            set;
        }
    }

    public interface BlocklistUpdate
    {
        Array<String> added
        {
            get;
            set;
        }

        Array<String> removed
        {
            get;
            set;
        }
    }
}