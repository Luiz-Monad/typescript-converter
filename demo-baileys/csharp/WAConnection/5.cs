/// This file was generated by C# converter tool
/// Any changes made to this file manually will be lost next time the file is regenerated.

using System.Linq;
using TypeScript.CSharp;
using Base = Bailey.WAConnection;

namespace Bailey
{
    public class WAConnection : Base
    {
        public WAConnection()
        {
            this.isOnWhatsApp = (str) =>
            {
                var { status, jid, biz } = await this.query(new WAQuery() { { "json", new List<string> { "query", "exist", str } }, { "requiresPhoneConnection", false } });
                if (status == 200)
                    return (exists: true, jid: whatsappID(jid), isBusiness: biz as bool);
            };
            this.updatePresence = (jid, type) => this.sendBinary(new WANode { "action", (epoch: this.msgCount.toString(), type: "set"), new List<WANode> { new List<dynamic> { "presence", (type: type, to: jid), null } } }, new WATag { WAMetric.presence, WAFlag[type] }, undefined, true);
            this.requestPresenceUpdate = (jid) => this.query(new WAQuery() { { "json", new List<string> { "action", "presence", "subscribe", jid } } });
        }

        /// <summary>
        /// Query whether a given number is registered on WhatsApp
        /// </summary>
        /// <param name = "str">
        /// phone number/jid you want to check for
        /// </param>
        /// <returns>
        /// undefined if the number doesn't exists, otherwise the correctly formatted jid
        /// </returns>
        public dynamic isOnWhatsApp { get; set; }
        /// <summary>
        /// Tell someone about your presence -- online, typing, offline etc.
        /// </summary>
        /// <param name = "jid">
        /// the ID of the person/group who you are updating
        /// </param>
        /// <param name = "type">
        /// your presence
        /// </param>
        public dynamic updatePresence { get; set; }
        /// <summary>
        /// Request an update on the presence of a user
        /// </summary>
        public dynamic requestPresenceUpdate { get; set; }

        /// <summary>
        /// Query the status of the person (see groupMetadata() for groups)
        /// </summary>
        async public void getStatus(string jid = null)
        {
            Dictionary<string, string> status = await this.query(new WAQuery() { { "json", new List<string> { "query", "Status", jid || this.user.jid } }, { "requiresPhoneConnection", false } });
            return status;
        }

        async public void setStatus(string status)
        {
            var response = await this.setQuery(new List<WANode> { new List<WANode> { "status", null, Buffer.from(status, "utf-8") } });
            this.emit("contact-update", (jid: this.user.jid, status: status));
            return response;
        }

        /// <summary>
        /// Updates business profile.
        /// </summary>
        async public void updateBusinessProfile(WABusinessProfile profile)
        {
            if (profile.business_hours.config)
            {
                profile.business_hours.business_config = profile.business_hours.config;
                AAA___ delete  profile . business_hours . config  ___AAA ;
            }

            var json = new List<string>
            {
                "action",
                "editBusinessProfile",
                (__spread__: profile, v: 2)
            };
            dynamic response;
            try
            {
                response = await this.query(new WAQuery() { { "json", json }, { "expect200", true }, { "requiresPhoneConnection", true } });
            }
            catch (Exception _)
            {
                return new
                {
                    status = 400
                };
            }

            return new
            {
                status = response.status
            };
        }

        async public void updateProfileName(string name)
        {
            var response = (await this.setQuery(new List<WANode> { new List<WANode> { "profile", new Dictionary<string, dynamic>() { { "name", name } }, null } })) as dynamic as (double status, string pushname);
            if (response.status == 200)
            {
                this.user.name = response.pushname;
                this.emit("contact-update", (jid: this.user.jid, name: name));
            }

            return response;
        }

        /// <summary>
        /// Get your contacts
        /// </summary>
        async public void getContacts()
        {
            var json = new List<string>
            {
                "query",
                (epoch: this.msgCount.toString(), type: "contacts"),
                null
            };
            var response = await this.query(new WAQuery() { { "json", json }, { "binaryTags", new List<WAMetric> { WAMetric.queryContact, WAFlag.ignore } }, { "expect200", true }, { "requiresPhoneConnection", true } });
            return response;
        }

        /// <summary>
        /// Get the stories of your contacts
        /// </summary>
        async public void getStories()
        {
            var json = new List<string>
            {
                "query",
                (epoch: this.msgCount.toString(), type: "status"),
                null
            };
            var response = await this.query(new WAQuery() { { "json", json }, { "binaryTags", new List<WAMetric> { WAMetric.queryStatus, WAFlag.ignore } }, { "expect200", true }, { "requiresPhoneConnection", true } }) as WANode;
            if (Array.isArray(response[2]))
            {
                return response[2].map((row) => ((unread: row[1].unread, count: row[1].count, messages: Array.isArray(row[2]) ? row[2].map((m) => m[2]) : new dynamic()) as (double unread, double count, List<WAMessage> messages)));
            }

            return new List<>();
        }

        /// <summary>
        /// Fetch your chats
        /// </summary>
        async public void getChats()
        {
            var json = new List<string>
            {
                "query",
                (epoch: this.msgCount.toString(), type: "chat"),
                null
            };
            return this.query(new WAQuery() { { "json", json }, { "binaryTags", new List<double> { 5, WAFlag.ignore } }, { "expect200", true } });
        }

        /// <summary>
        /// Query broadcast list info
        /// </summary>
        async public void getBroadcastListInfo(string jid)
        {
            return this.query(new WAQuery() { { "json", new List<string> { "query", "contact", jid } }, { "expect200", true }, { "requiresPhoneConnection", true } }) as Promise<WABroadcastListInfo>;
        }

        /// <summary>
        /// Load chats in a paginated manner + gets the profile picture
        /// </summary>
        /// <param name = "before">
        /// chats before the given cursor
        /// </param>
        /// <param name = "count">
        /// number of results to return
        /// </param>
        /// <param name = "searchString">
        /// optionally search for users
        /// </param>
        /// <returns>
        /// the chats & the cursor to fetch the next page
        /// </returns>
        public void loadChats(double count, string before, WALoadChatOptions options = new WALoadChatOptions())
        {
            var searchString = options.searchString.toLowerCase();
            var chats = this.chats.paginated(before, count, options && ((chat) => ((TypeOf(options.custom) != "function" || options.custom(chat)) && (TypeOf(searchString) == "undefined" || chat.name.toLowerCase().includes(searchString) || chat.jid.includes(searchString)))));
            var cursor = (chats[chats.length - 1] && chats.length >= count) && this.chatOrderingKey.key(chats[chats.length - 1]);
            return new
            {
                chats = chats,
                cursor = cursor
            };
        }

        /// <summary>
        /// Update the profile picture
        /// </summary>
        /// <param name = "jid">
        /// </param>
        /// <param name = "img">
        /// </param>
        async public void updateProfilePicture(string jid, Buffer img)
        {
            jid = whatsappID(jid);
            var data = await generateProfilePicture(img);
            var tag = this.generateMessageTag();
            WANode query = new WANode
            {
                "picture",
                (jid: jid, id: tag, type: "set"),
                new List<WANode>
                {
                    new List<dynamic>
                    {
                        "image",
                        null,
                        data.img
                    },
                    new List<dynamic>
                    {
                        "preview",
                        null,
                        data.preview
                    }
                }
            };
            var response = await (this.setQuery(new List<WANode> { query }, new WATag { WAMetric.picture, 136 }, tag) as Promise<WAProfilePictureChange>);
            if (jid == this.user.jid)
                this.user.imgUrl = response.eurl;
            else if (this.chats.get(jid))
            {
                this.chats.get(jid).imgUrl = response.eurl;
                this.emit("chat-update", (jid: jid, imgUrl: response.eurl));
            }

            return response;
        }

        /// <summary>
        /// Add or remove user from blocklist
        /// </summary>
        /// <param name = "jid">
        /// the ID of the person who you are blocking/unblocking
        /// </param>
        /// <param name = "type">
        /// type of operation
        /// </param>
        async public void blockUser(string jid, string /*add*/ type = "add")
        {
            WANode json = new WANode
            {
                "block",
                new Dictionary<string, string /*add*/>()
                {
                    {
                        "type",
                        type
                    }
                },
                new List<WANode>
                {
                    new List<dynamic>
                    {
                        "user",
                        new Dictionary<string, dynamic>()
                        {
                            {
                                "jid",
                                jid
                            }
                        },
                        null
                    }
                }
            };
            var result = await this.setQuery(new List<WANode> { json }, new WATag { WAMetric.block, WAFlag.ignore });
            if (result.status == 200)
            {
                if (type == "add")
                {
                    this.blocklist.push(jid);
                }
                else
                {
                    var index = this.blocklist.indexOf(jid);
                    if (index != -1)
                    {
                        this.blocklist.splice(index, 1);
                    }
                }

                BlocklistUpdate update = new BlocklistUpdate()
                {
                    {
                        "added",
                        new List<dynamic>()
                    },
                    {
                        "removed",
                        new List<dynamic>()
                    }
                };
                var key = type == "add" ? "added" : "removed";
                update[key] = new List<string>
                {
                    jid
                };
                this.emit("blocklist-update", update);
            }

            return result;
        }

        /// <summary>
        /// Query Business Profile (Useful for VCards)
        /// </summary>
        /// <param name = "jid">
        /// Business Jid
        /// </param>
        /// <returns>
        /// profile object or undefined if not business account
        /// </returns>
        async public void getBusinessProfile(string jid)
        {
            jid = whatsappID(jid);
            var {
            profiles: [{
                profile,
                wid 
            }]
        } = await this.query(new WAQuery() { { "json", new List<string> { "query", "businessProfile", new List<dynamic> { new Dictionary<string, dynamic>() { { "wid", jid.replace("@s.whatsapp.net", "@c.us") } } }, 84 } }, { "expect200", true }, { "requiresPhoneConnection", false } });
            return new
            {
                wid = whatsappID(wid)
            };
        }
    }
}