/// This file was generated by Java converter tool
/// Any changes made to this file manually will be lost next time the file is regenerated.

package demo;

public class WAConnection extends Base {
    
    public /*missing*/ WAConnection() {
        this.setFetchGroupMetadataFromWA(new (){
            
            public AnyXXXXXX invoke(String jid) {
                final AnyXXXXXX metadata = query(AnyXXXXXX);
                metadata.setParticipants(metadata.getParticipants().map(new IMapCallback<AnyXXXXXX, AnyXXXXXX>(){
                    
                    public AnyXXXXXX invoke(AnyXXXXXX p, int index) {
                        return (AnyXXXXXX);
                    }
                }));
                return cast(metadata, WAGroupMetadata.class);
            }
        });
        this.setGroupMetadataMinimal(new (){
            
            public AnyXXXXXX invoke(String jid) {
                final ArrayList<String> query = new ArrayList<String>(Array.asList(new String[]{"query", new Triplet<String, String, AnyXXXXXX>("group", jid, NumberExtension.toString(this.msgCount)), null}));
                final AnyXXXXXX response = query(AnyXXXXXX);
                final AnyXXXXXX json = response.get(2).get(0);
                final AnyXXXXXX creatorDesc = json.get(1);
                final ArrayList<AnyXXXXXX> participants = json.get(2) ? json.get(2).filter(new IFilterCallback<AnyXXXXXX>(){
                    
                    public AnyXXXXXX invoke(AnyXXXXXX item, int index) {
                        return StringOperator.logicalCompare(item.get(0), "===", "participant");
                    }
                }) : new ArrayList<AnyXXXXXX>();
                final AnyXXXXXX description = json.get(2) ? json.get(2).find(new ArrowFnXXXXXX(){
                    
                    public AnyXXXXXX invoke(AnyXXXXXX item) {
                        return StringOperator.logicalCompare(item.get(0), "===", "description");
                    }
                }) : null;
                return cast(new Septet<String, AnyXXXXXX, AnyXXXXXX, double, AnyXXXXXX, AnyXXXXXX, AnyXXXXXX>(jid, creatorDesc.getCreator(), creatorDesc.getCreator(), parseInt(creatorDesc.getCreate()), null, description && description.get(2).toString("utf-8"), ArrayExtension.map(participants, new IMapCallback<AnyXXXXXX, AnyXXXXXX>(){
                    
                    public AnyXXXXXX invoke(AnyXXXXXX item, int index) {
                        return (new Unit<boolean>(StringOperator.logicalCompare(item.get(1).getType(), "===", "admin")));
                    }
                })), WAGroupMetadata.class);
            }
        });
        this.setGroupCreate(new (){
            
            public AnyXXXXXX invoke(String title, ArrayList<String> participants) {
                final WAGroupCreateResponse response = cast(groupQuery("create", null, title, participants), WAGroupCreateResponse.class);
                final String gid = response.getGid();
                WAGroupMetadata metadata;
                try {
                    metadata = groupMetadata(gid);
                } catch (Exception error) {
                    getLogger().warn(MessageFormat.format("error in group creation: {0}, switching gid & checking", error));
                    final AnyXXXXXX comps = StringExtension.split(StringExtension.replace(gid, "@g.us", ""), "-");
                    response.setGid(MessageFormat.format("{0}-{1}@g.us", comps[0], +comps[1] + 1));
                    metadata = groupMetadata(gid);
                    getLogger().warn(MessageFormat.format("group ID switched from {0} to {1}", gid, response.gid));
                }
                chatAdd(response.getGid(), title, AnyXXXXXX);
                return response;
            }
        });
        this.setGroupLeave(new (){
            
            public AnyXXXXXX invoke(String jid) {
                final AnyXXXXXX response = groupQuery("leave", jid);
                final AnyXXXXXX chat = getChats().get(jid);
                if (chat) chat.setRead_only("true");
                return response;
            }
        });
        this.setGroupUpdateSubject(new (){
            
            public AnyXXXXXX invoke(String jid, String title) {
                final AnyXXXXXX chat = getChats().get(jid);
                if (StringOperator.logicalCompare(chat.getName(), "===", title)) throw new BaileysError("redundant change"){
                    {
                        setStatus(400.0);
                    }
                };
                final AnyXXXXXX response = groupQuery("subject", jid, title);
                if (chat) chat.setName(title);
                return response;
            }
        });
        this.setGroupUpdateDescription(new (){
            
            public AnyXXXXXX invoke(String jid, String description) {
                final AnyXXXXXX metadata = groupMetadata(jid);
                final WANode node = new WANode(Array.asList(new AnyXXXXXX[]{"description", new Pair<AnyXXXXXX, AnyXXXXXX>(generateMessageID(), metadata.getDescId()), Buffer.from(description, "utf-8")}));
                final AnyXXXXXX response = groupQuery("description", jid, null, null, new ArrayList<WANode>(Array.asList(new WANode[]{node})));
                return response;
            }
        });
        this.setGroupAdd(new (){
            
            public AnyXXXXXX invoke(String jid, ArrayList<String> participants) {
                return (Promise<WAGroupModification>)groupQuery("add", jid, null, participants);
            }
        });
        this.setGroupRemove(new (){
            
            public AnyXXXXXX invoke(String jid, ArrayList<String> participants) {
                return (Promise<WAGroupModification>)groupQuery("remove", jid, null, participants);
            }
        });
        this.setGroupMakeAdmin(new (){
            
            public AnyXXXXXX invoke(String jid, ArrayList<String> participants) {
                return (Promise<WAGroupModification>)groupQuery("promote", jid, null, participants);
            }
        });
        this.setGroupDemoteAdmin(new (){
            
            public AnyXXXXXX invoke(String jid, ArrayList<String> participants) {
                return (Promise<WAGroupModification>)groupQuery("demote", jid, null, participants);
            }
        });
        this.setGroupSettingChange(new (){
            
            public AnyXXXXXX invoke(String jid, GroupSettingChange setting, boolean onlyAdmins) {
                final WANode node = new WANode(Array.asList(new AnyXXXXXX[]{setting, AnyXXXXXX, null}));
                return (Promise<Unit<Double>>)groupQuery("prop", jid, null, null, new ArrayList<WANode>(Array.asList(new WANode[]{node})));
            }
        });
    }
    
    public void groupQuery(String type) {
        groupQuery(type, null);
    }
    
    public void groupQuery(String type, final String jid) {
        groupQuery(type, jid, null);
    }
    
    public void groupQuery(String type, final String jid, String subject) {
        groupQuery(type, jid, subject, null);
    }
    
    public void groupQuery(String type, final String jid, String subject, ArrayList<String> participants) {
        groupQuery(type, jid, subject, participants, null);
    }
    
    /** Generic function for group queries */
    public void groupQuery(String type, final String jid, String subject, ArrayList<String> participants, ArrayList<WANode> additionalNodes) {
        final void tag = this.generateMessageTag();
        final WANode json = new WANode(Array.asList(new AnyXXXXXX[]{"group", new Quintet<String, void, String, String, String>(this.getUser().getJid(), tag, type, jid, subject), participants ? ArrayExtension.map(participants, new IMapCallback<AnyXXXXXX, AnyXXXXXX>(){
            
            public AnyXXXXXX invoke(AnyXXXXXX jid, int index) {
                return new ArrayList<String>(Array.asList(new String[]{"participant", AnyXXXXXX, null}));
            }
        }) : additionalNodes}));
        final AnyXXXXXX result = this.setQuery(new ArrayList<WANode>(Array.asList(new WANode[]{json})), new WATag(Array.asList(new AnyXXXXXX[]{WAMetric.group, 136.0})), tag);
        return result;
    }
    
    /**
     * Get the metadata of the group
     * Baileys automatically caches & maintains this state
     */
    public void groupMetadata(String jid) {
        final AnyXXXXXX chat = this.getChats().get(jid);
        AnyXXXXXX metadata = chat.getMetadata();
        if (!metadata) {
            if (chat.getRead_only()) {
                metadata = this.groupMetadataMinimal(jid);
            } else {
                metadata = this.fetchGroupMetadataFromWA(jid);
            }
            if (chat) chat.setMetadata(metadata);
        }
        return metadata;
    }
    private AnyXXXXXX fetchGroupMetadataFromWA;
    
    /** Get the metadata of the group from WA */
    public AnyXXXXXX getFetchGroupMetadataFromWA() {
        return fetchGroupMetadataFromWA;
    }
    
    /** Get the metadata of the group from WA */
    public void setFetchGroupMetadataFromWA(AnyXXXXXX value) {
        this.fetchGroupMetadataFromWA = value;
    }
    private AnyXXXXXX groupMetadataMinimal;
    
    /** Get the metadata (works after you've left the group also) */
    public AnyXXXXXX getGroupMetadataMinimal() {
        return groupMetadataMinimal;
    }
    
    /** Get the metadata (works after you've left the group also) */
    public void setGroupMetadataMinimal(AnyXXXXXX value) {
        this.groupMetadataMinimal = value;
    }
    private AnyXXXXXX groupCreate;
    
    /**
     * Create a group
     * @param title like, the title of the group
     * @param participants people to include in the group
     */
    public AnyXXXXXX getGroupCreate() {
        return groupCreate;
    }
    
    /**
     * Create a group
     * @param title like, the title of the group
     * @param participants people to include in the group
     */
    public void setGroupCreate(AnyXXXXXX value) {
        this.groupCreate = value;
    }
    private AnyXXXXXX groupLeave;
    
    /**
     * Leave a group
     * @param jid the ID of the group
     */
    public AnyXXXXXX getGroupLeave() {
        return groupLeave;
    }
    
    /**
     * Leave a group
     * @param jid the ID of the group
     */
    public void setGroupLeave(AnyXXXXXX value) {
        this.groupLeave = value;
    }
    private AnyXXXXXX groupUpdateSubject;
    
    /**
     * Update the subject of the group
     * @param {string} jid the ID of the group
     * @param {string} title the new title of the group
     */
    public AnyXXXXXX getGroupUpdateSubject() {
        return groupUpdateSubject;
    }
    
    /**
     * Update the subject of the group
     * @param {string} jid the ID of the group
     * @param {string} title the new title of the group
     */
    public void setGroupUpdateSubject(AnyXXXXXX value) {
        this.groupUpdateSubject = value;
    }
    private AnyXXXXXX groupUpdateDescription;
    
    /**
     * Update the group description
     * @param {string} jid the ID of the group
     * @param {string} title the new title of the group
     */
    public AnyXXXXXX getGroupUpdateDescription() {
        return groupUpdateDescription;
    }
    
    /**
     * Update the group description
     * @param {string} jid the ID of the group
     * @param {string} title the new title of the group
     */
    public void setGroupUpdateDescription(AnyXXXXXX value) {
        this.groupUpdateDescription = value;
    }
    private AnyXXXXXX groupAdd;
    
    /**
     * Add somebody to the group
     * @param jid the ID of the group
     * @param participants the people to add
     */
    public AnyXXXXXX getGroupAdd() {
        return groupAdd;
    }
    
    /**
     * Add somebody to the group
     * @param jid the ID of the group
     * @param participants the people to add
     */
    public void setGroupAdd(AnyXXXXXX value) {
        this.groupAdd = value;
    }
    private AnyXXXXXX groupRemove;
    
    /**
     * Remove somebody from the group
     * @param jid the ID of the group
     * @param participants the people to remove
     */
    public AnyXXXXXX getGroupRemove() {
        return groupRemove;
    }
    
    /**
     * Remove somebody from the group
     * @param jid the ID of the group
     * @param participants the people to remove
     */
    public void setGroupRemove(AnyXXXXXX value) {
        this.groupRemove = value;
    }
    private AnyXXXXXX groupMakeAdmin;
    
    /**
     * Make someone admin on the group
     * @param jid the ID of the group
     * @param participants the people to make admin
     */
    public AnyXXXXXX getGroupMakeAdmin() {
        return groupMakeAdmin;
    }
    
    /**
     * Make someone admin on the group
     * @param jid the ID of the group
     * @param participants the people to make admin
     */
    public void setGroupMakeAdmin(AnyXXXXXX value) {
        this.groupMakeAdmin = value;
    }
    private AnyXXXXXX groupDemoteAdmin;
    
    /**
     * Make demote an admin on the group
     * @param jid the ID of the group
     * @param participants the people to make admin
     */
    public AnyXXXXXX getGroupDemoteAdmin() {
        return groupDemoteAdmin;
    }
    
    /**
     * Make demote an admin on the group
     * @param jid the ID of the group
     * @param participants the people to make admin
     */
    public void setGroupDemoteAdmin(AnyXXXXXX value) {
        this.groupDemoteAdmin = value;
    }
    private AnyXXXXXX groupSettingChange;
    
    /**
     * Make demote an admin on the group
     * @param jid the ID of the group
     * @param participants the people to make admin
     */
    public AnyXXXXXX getGroupSettingChange() {
        return groupSettingChange;
    }
    
    /**
     * Make demote an admin on the group
     * @param jid the ID of the group
     * @param participants the people to make admin
     */
    public void setGroupSettingChange(AnyXXXXXX value) {
        this.groupSettingChange = value;
    }
    
    /**
     * Get the invite link of the given group
     * @param jid the ID of the group
     * @returns invite code
     */
    public void groupInviteCode(String jid) {
        final ArrayList<String> json = new ArrayList<String>(Array.asList(new String[]{"query", "inviteCode", jid}));
        final AnyXXXXXX response = this.query(AnyXXXXXX);
        return cast(response.getCode(), String.class);
    }
    
    /**
     * Join group via invite code
     * @param code the invite code
     * @returns Object containing gid
     */
    public void acceptInvite(String code) {
        final ArrayList<String> json = new ArrayList<String>(Array.asList(new String[]{"action", "invite", code}));
        final AnyXXXXXX response = this.query(AnyXXXXXX);
        return response;
    }
    
    /**
     * Revokes the current invite link for a group chat
     * @param jid the ID of the group
     */
    public void revokeInvite(String jid) {
        final ArrayList<String> json = new ArrayList<String>(Array.asList(new String[]{"action", "inviteReset", jid}));
        final AnyXXXXXX response = this.query(AnyXXXXXX);
        return response;
    }
}